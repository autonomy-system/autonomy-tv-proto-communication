
syntax = "proto3";
option java_multiple_files = true;
option java_outer_classname = "ControlProto";
option objc_class_prefix = "HLW";

package canvas_control;

// to generate code:
// protoc --plugin=protoc-gen-dart=$HOME/.pub-cache/bin/protoc-gen-dart --dart_out=grpc:lib/src/generated/canvas_control -Iprotos protos/canvas_control.proto

service CanvasControl {
  // Client requests to connect to the server
  rpc Connect (ConnectRequest) returns (ConnectReply) {}

  // Client requests to check the status of the device
  rpc Status (CheckingStatus) returns (ResponseStatus) {}

  // Client requests to disconnect from the server
  rpc Disconnect (DisconnectRequest) returns (Empty) {}

  // Client request to cast a single artwork
  rpc CastSingleArtwork (CastSingleRequest) returns (CastSingleReply) {}

  // Client request uncast a single artwork
  rpc UncastSingleArtwork (UncastSingleRequest) returns (UncastSingleReply) {}
}

message ConnectRequest {
  DeviceInfo device = 1;
}

message DeviceInfo {
  // Client device did key
  string device_id = 1;
  // Device name
  string device_name = 2;
}

message ConnectReply {
  bool status = 1;
}

message CheckingStatus {
  // Client device did key
  string device_id = 1;
}

message ResponseStatus {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;  // Used only by the Watch method.
  }
  ServingStatus status = 1;
  // The scene id that the device is currently playing
  string scene_id = 2;
}

message DisconnectRequest {
  // Client device did key
  string device_id = 1;
}

message DisconnectReply {
  string message = 1;
}

message CastSingleRequest {
  string id = 1;
}

message CastSingleReply {
  bool status = 1;
}

message UncastSingleRequest {
  string id = 1;
}

message UncastSingleReply {
  bool status = 1;
}

message Empty {}